@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
	Layout = null;
}

@{
    Layout = null;
    ViewContext.HttpContext.Response.Headers.Remove("Content-Type");
    ViewContext.HttpContext.Response.Headers.Add("Content-Type", "text/xml");

    var siteHomePage = Model.AncestorOrSelf(1);
   // IPublishedContent siteHomePage = Model.Parent;
   @* var maxSiteMapDepth = Model.HasValue("maxSiteMapDepth") ? Model.Value<int>("maxSiteMapDepth") : int.MaxValue; *@
   var maxSiteMapDepth = 3;
    IEnumerable<IPublishedContent> sitePages = siteHomePage.Children();
    string blacklistedDocumentTypeList = Model.Value<string>("blacklistedDocumentTypes");
    string[] blackListedDocumentTypes = (!String.IsNullOrEmpty(blacklistedDocumentTypeList)) ? blacklistedDocumentTypeList.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries) : new string[] { };
}


<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemalocation="http://www.google.com/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
    
    @{ 
        RenderSiteMapUrlEntry(siteHomePage); 
        RenderSiteMapUrlEntriesForChildren(siteHomePage, maxSiteMapDepth,blackListedDocumentTypes);
    }

</urlset>


@{
    void RenderSiteMapUrlEntry(IPublishedContent? node)
    {
       var changeFreq = node.HasValue("searchEngineChangeFrequency", "true") ? node.Value("searchEngineChangeFrequency") : "monthly";
        var priority = node.HasValue("searchEngineRelativePriority") ? node.Value<string>("searchEngineRelativePriority") : "0.5";
    
        <url>
            <loc>@EnsureUrlStartsWithDomain(@node.Url(mode: UrlMode.Absolute))</loc>
            <lastmod>@(string.Format("{0:s}+00:00", node.UpdateDate))</lastmod>
           @* <changefreq>@changeFreq</changefreq>
            <priority>@priority</priority>*@
        </url>
    }
}


@functions {
    private static string EnsureUrlStartsWithDomain(string url)
    {

        if (url.StartsWith("http")){
            return url;
        }
        else {
            //var domainPrefix = string.Format("https://{0}/", HttpContext.Current.Request.ServerVariables["HTTP_HOST"]);
       
            var domainPrefix = string.Format("https://{0}/", url.TrimEnd('/'));
            return domainPrefix;
        }

    }
}



@{
    void RenderSiteMapUrlEntriesForChildren(IPublishedContent parentPage, int maxSiteMapDepth, string[] documentTypeBlacklist)
    {
        foreach (var page in parentPage.Children.Where(f => !documentTypeBlacklist.Contains(f.ContentType.Alias) && !f.Value<bool>("hideFromXmlSiteMap")))
        {
            RenderSiteMapUrlEntry(page);
            if (page.Level < maxSiteMapDepth && page.Children.Any(f => !documentTypeBlacklist.Contains(f.ContentType.Alias) && !f.Value<bool>("hideFromXmlSiteMap")))
            {
                RenderSiteMapUrlEntriesForChildren(page, maxSiteMapDepth, documentTypeBlacklist); 
            }
        }
    }
}


